from PIL import Image
import numpy as np
import zipfile
import os

# LSB Replacement
def lsb_replacement(image_path, message, output_path, rate=1):
    image = Image.open(image_path)
    pixels = np.array(image)
    flat_pixels = pixels.flatten()
    
    message_bits = ''.join(format(ord(char), '08b') for char in message)
    total_bits = len(message_bits)
    
    if total_bits > len(flat_pixels) * rate:
        raise ValueError("Message is too large to hide in this image with the given rate.")
    
    for i in range(0, total_bits, rate):
        pixel_index = i // rate
        bits_to_replace = message_bits[i:i + rate].ljust(rate, '0')
        flat_pixels[pixel_index] = (flat_pixels[pixel_index] & (255 - (2 ** rate - 1))) | int(bits_to_replace, 2)
    
    new_pixels = flat_pixels.reshape(pixels.shape)
    new_image = Image.fromarray(new_pixels)
    new_image.save(output_path)

def lsb_extraction(image_path, message_length, rate=1):
    image = Image.open(image_path)
    pixels = np.array(image)
    flat_pixels = pixels.flatten()
    
    message_bits = ''
    for i in range(0, message_length * 8, rate):
        pixel_index = i // rate
        bits = flat_pixels[pixel_index] & (2 ** rate - 1)
        message_bits += format(bits, '0' + str(rate) + 'b')
    
    message = ''
    for i in range(0, len(message_bits), 8):
        byte = message_bits[i:i+8]
        message += chr(int(byte, 2))
    
    return message

# LSB Matching
def lsb_matching(image_path, message, output_path, rate=1):
    image = Image.open(image_path)
    pixels = np.array(image)
    flat_pixels = pixels.flatten()
    
    message_bits = ''.join(format(ord(char), '08b') for char in message)
    total_bits = len(message_bits)
    
    if total_bits > len(flat_pixels) * rate:
        raise ValueError("Message is too large to hide in this image with the given rate.")
    
    for i in range(0, total_bits, rate):
        pixel_index = i // rate
        target_bits = message_bits[i:i + rate].ljust(rate, '0')
        current_bits = format(flat_pixels[pixel_index], '08b')[-rate:]
        
        if current_bits != target_bits:
            if current_bits < target_bits:
                flat_pixels[pixel_index] += 1
            else:
                flat_pixels[pixel_index] -= 1
    
    new_pixels = flat_pixels.reshape(pixels.shape)
    new_image = Image.fromarray(new_pixels)
    new_image.save(output_path)

def lsb_matching_extraction(image_path, message_length, rate=1):
    # Extraction is the same as LSB-R
    return lsb_extraction(image_path, message_length, rate)

# Hamming Code Embedding
def hamming_encode(data):
    def calc_parity(bits, positions):
        return sum([int(bits[i - 1]) for i in positions]) % 2
    
    encoded = []
    for byte in data:
        bits = format(byte, '08b')
        p1 = calc_parity(bits, [1, 2, 4])
        p2 = calc_parity(bits, [1, 3, 4])
        p3 = calc_parity(bits, [2, 3, 4])
        encoded_bits = f'{p1}{p2}{bits[0]}{p3}{bits[1:]}'
        encoded.append(int(encoded_bits, 2))
    
    return encoded

def hamming_embedding(image_path, message, output_path):
    image = Image.open(image_path)
    pixels = np.array(image)
    flat_pixels = pixels.flatten()
    
    message_bytes = [ord(char) for char in message]
    encoded_message = hamming_encode(message_bytes)
    
    if len(encoded_message) > len(flat_pixels):
        raise ValueError("Message is too large to hide in this image.")
    
    for i in range(len(encoded_message)):
        flat_pixels[i] = encoded_message[i]
    
    new_pixels = flat_pixels.reshape(pixels.shape)
    new_image = Image.fromarray(new_pixels)
    new_image.save(output_path)

def hamming_decode(encoded_message):
    decoded_message = ''
    for encoded_byte in encoded_message:
        bits = format(encoded_byte, '08b')
        data_bits = bits[2] + bits[4:]
        decoded_message += chr(int(data_bits, 2))
    return decoded_message

def hamming_extraction(image_path, message_length):
    image = Image.open(image_path)
    pixels = np.array(image)
    flat_pixels = pixels.flatten()
    
    encoded_message = []
    for i in range(message_length * 2):  # Each byte is encoded to 2 bytes
        encoded_message.append(flat_pixels[i])
    
    decoded_message = hamming_decode(encoded_message)
    return decoded_message

# Compression measurement
def compress_and_measure(image_path):
    with zipfile.ZipFile('temp.zip', 'w', zipfile.ZIP_DEFLATED) as zipf:
        zipf.write(image_path)
    size = os.path.getsize('temp.zip')
    os.remove('temp.zip')
    return size

# Example usage
image_path = 'input.bmp'
message
output_path_lsb_r = 'output_lsb_r.bmp'
output_path_lsb_m = 'output_lsb_m.bmp'
output_path_hamming = 'output_hamming.bmp'

# LSB Replacement
lsb_replacement(image_path, message, output_path_lsb_r, rate=1)
extracted_message_lsb_r = lsb_extraction(output_path_lsb_r, len(message), rate=1)
print(f'Extracted message (LSB-R): {extracted_message_lsb_r}')

# LSB Matching
lsb_matching(image_path, message, output_path_lsb_m, rate=1)
extracted_message_lsb_m = lsb_matching_extraction(output_path_lsb_m, len(message), rate=1)
print(f'Extracted message (LSB-M): {extracted_message_lsb_m}')

# Hamming Code Embedding
hamming_embedding(image_path, message, output_path_hamming)
extracted_message_hamming = hamming_extraction(output_path_hamming, len(message))
print(f'Extracted message (Hamming): {extracted_message_hamming}')

# Compression analysis
original_size = os.path.getsize(image_path)
compressed_size_lsb_r = compress_and_measure(output_path_lsb_r)
compressed_size_lsb_m = compress_and_measure(output_path_lsb_m)
compressed_size_hamming = compress_and_measure(output_path_hamming)

print(f'Original size: {original_size}')  #
print(f'Compressed size (LSB-R): {compressed_size_lsb_r}')
print(f'Compressed size (LSB-M): {compressed_size_lsb_m}') 
print(f'Compressed size (Hamming): {compressed_size_hamming}')
